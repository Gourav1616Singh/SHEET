class Solution {
public:
    int longestPalindromeSubseq(string s) {
         int m = s.size();
        string str2=s;
        reverse(str2.begin(),str2.end());
    int dp[m + 1][m + 1];
    for(int i = 0; i <= m; i++)
    {
        for(int j = 0; j <= m; j++)
        {
            if(i == 0 || j == 0)
                dp[i][j] = 0;
            else if(s[i - 1] == str2[j - 1])
                dp[i][j] = dp[i - 1][j - 1] + 1;
            else
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
        }
    }
    string ans="";
    int i = m, j = m;
    while(i > 0 && j > 0)
    {
        
        if(s[i - 1] == str2[j - 1])
        {
            ans.push_back(s[i-1]);
            i--;
            j--;
        }
       
        else if(dp[i - 1][j] > dp[i][j - 1])
        {
            i--;
        }
      
        else
        {
            j--;
        }
    }
    reverse(ans.begin(), ans.end());
    
   return ans.size();

    }
    
};
