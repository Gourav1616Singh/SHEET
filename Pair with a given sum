
#include<iostream>
using namespace std;

bool pairInSortedRotated(int arr[], int n, int x)
{
	// Find the highest element
	int i;
	for (i=0; i<n-1; i++)
		if (arr[i] > arr[i+1])
			break;
	int low = (i+1)%n; // low is now index of smallest element
	int high = i;	 // high is now index of largest element

	// Keep moving either l or r till they meet
	while (low != high)
	{
		// If we find a pair with sum x, we return true
		if (arr[low] + arr[high] == x)
			return true;

		// If current pair sum is less, move to the higher sum
		if (arr[low] + arr[high] < x)
			low= (low + 1)%n;
		else // Move to the lower sum side
			high = (n + high - 1)%n;
	}
	return false;
}


int main()
{
	int arr[] = {11, 15, 6, 8, 9, 10};
	int sum = 16;
	int n = sizeof(arr)/sizeof(arr[0]);

	if (pairInSortedRotated(arr, n, sum))
		cout << "Array has two elements with sum 16";
	else
		cout << "Array doesn't have two elements with sum 16 ";

	return 0;
}
